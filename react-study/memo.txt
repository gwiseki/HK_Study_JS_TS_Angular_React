09/01

-intro-
예전에는 아주 밑 단부터 차근차근 개발을 했지만, 요새는 도구가 매우 많음. 도구를 어떻게 잘 활용하느냐가 관건.
코드 품질, 이런거는 상대적.

다룰내용 :
typescript playground
codesandbox
reactjs.org(리액트 공식사이트에 알아야 할 내용이 아주 많음)
redux
MobX
Redux-Saga


-typescript-
type을 명시적으로 지정해줌.

예전에는 function bar(){ ... } 이렇게 되면 가변인자를 처리하는 함수인지 잘 알 수 없었는데
최근에 function bar(...args) { } 이렇게 처리해서 좀더 명시적으로 표현해줄 수 있다.

primitive 타입에 무엇이 있을까?

let foo: number = 10;
이 primitive타입의 장점은, 일반화 돼있기 때문에 다양한 곳에 사용할 수 있다는 장점이 있다.

예를 들어 let age: Age = 10;
라고 표현하고 싶다면,
type Age = number; 이렇게 코드를 써주면 가능.(type alias 사용)

compile time에만 작동하는 요소와 run time까지 가는 요소가 있음
type alia, interface, generic -> compile time에만 작동하는 요소. (generic 어렵)
run time요소는 js로 변환되는 요소들(?)

type Foo = {
	age: number;
	name: string;
}

interface Bar {
	age: Age;
	name: string;
}
const foo: Foo = {
	age: 10,
	name: 'kim',
}

const bar: Bar = {
	age: 10,
	name: 'kim',
}

type alias vs interface?
스펙은 거의 비슷함.

tsx문법.

주니어가 시니어 보다 압도적으로 유리한 것 : 시간

여유를 가지고 이것저것 해보는 시간을 갖도록.
회사에 내가 뭔가를 끊임없이 하는걸 보여주는게 좋다고 생각하는 사람이 있는데, 계속 하다보면 지칠테니까 여유를 갖고 하는것이 중요함.


CRA의 장점 : 간단하고, 모든것들이 다 setting 되어있다.
단점 : CRA에 제공하지 않는 것을 구성하는 것이 꽤 까다롭다, 다양한 환경에 대한 대응이 어렵다.
frontend server만 아니라 api server, ..........
그래서 CRA는 production용 app에서는 추천되지 않고, 학습이나 toy project용으로나 해보는 것이 좋음.
그래도 해보고 싶다면, eject 옵션이 존재하긴 하는데, eject된 것이 구성이 굉장히 복잡함.

-상태관리-
변하는 상태가 있을 때 어떻게 할 것인가? compent 자체가 immutable한 상태를 지양함. 전역에 있는 상태를 어떻게 할 것인가?
여러 해결책이 있는데, 제일 먼저 나온 해결책은 redux라는 architecture임. 
react와 상태관리는 단짝을 이룸.
react 상태 관리 : redux !
redux는 정말로 너무 간단하다. 근데 그 간단함 때문에 많은 분들이 어려워함.

MobX는 redux이 대체품이라고 보다는, 상태관리의 paradigm을 완전히 바꿔버린 녀석. 처음쓰면 굉장히 편함.
강타입 언어를 선호하는 이유?(ts 선호하는 이유)


-----------------------------------------------------------------------------
09/03

javascript a-z
react든, angular든, typescript든 js가 기본이기 때문에 js를 a-z. js에 대한 지식도 면접에서 많이 나오기 때문에 도움이 많이 될 것.
redux나 mobx를 하기 전에, react가 70%를 차지할 정도로 주류임. 상태관리인 redux와 mobx비교도 redux가 압도적. redux는 간단함에도 어려움.

javascript는 primitive타입(기본타입) string, num ,boolean, undefined, symbol,...... 

lvalue, rvalue
let x = 10; 이렇게 돼 있을 때, x는 변수인데 양키들이 만들었기 때문에, 불변의 원칙을 하나 세워놓고 그걸 기반으로 하나씩 차곡차곡 쌓아가는 식임. 이 방식의 장점은 아무리 복잡한 것이라도 그 원칙을 파악해나갈 수 있다.
원칙 : js는 대부분 값임. js에서는 함수도 값이라도 규정해놓았음. function foo() {} let y = foo; 이런 식으로 값으로 할당이 가능함. js의 함수는 반드시 값을 반환하도록 돼있음. return이 없으면 undefined를 반환하도록 함. function foo(){ return 0; }
js 함수의 어려운 점은, const bar = function bar() { }; 함수는 값이라고 규정해버렸기 때문에 그렇게 보이지 않더라도 값이므로 변수에 넣을 수 있음. 그리고 앞 코드에서 값을 할당하는 것이기 때문에 세미콜론까지 들어감. 함수를 값으로 취급할 때에는 이름을 생략할 수 있다. 그렇지 않고 function() {}하면 값으로 취급되지 않기 때문에 에러가 남. 
(function() {

}) () 
위의 코드가  immediate function call이라고 함. 이 함수는 딱 한번만 사용됨. 초기화할때 등의 상황에 이런 코드를 사용함. 위의 코드는 함수 정의에 괄호를 한번 쳐줬기 때문에 값으로 취급한다고 말해주게됨

function foo(x) { }함수가 있으면, 인자에도 값이 위치하며 리턴에도 값이 위치할 수 있다. -> foo()함수를 호출할 때 값으로써 함수도 전달할 수 있다 -> foo(function () { } ) 
function foo(x) {
	x();
	return function (){
	};
}
const y = foo(function (){ });
이런식으로 리턴에도 함수(값)을 리턴할 수 있음. 그러니까 형태가 달라졌다고 당황하면 안됨.
따라서 js에서는 값을 변수에 담을 수 있고 함수를 값으로써 변수에 담을 수 있음. 이런 인자로 함수를 전달하는 것을 콜백함수라고 함. 내가 함수를 직접 호출하는게 아니라 다른 함수에게 그 함수의 호출을 위임하는 것. 1급 함수(high order function) : 함수를 인자로 받아 함수를 리턴하는 함수. 

js 함수를 이해할 때에, 함수는 값을 입력으로 받아 값을 출력하는 것으로 이해하지 말고 코드를 값으로 묶어서 그것이 함수이기 때문에 실행시킬 수 있으며 값을 반환하는 것으로 이해하는 것이 좋음. 
함수는 어떤 상황에서나 값을 반환한다. 반환할 게 없으면 undefined를 반환. undefined도 js에서는 값이라고 정의해놨음. forEach()의 리턴값도 undefined.

<함수의 변형>
함수 식을 만들 때
const foo = function foo() {
	foo();
};
위 코드에서 function foo 이름은 사실 필요는 없음.
안쪽 함수가 재귀로 자신을 호출할 때에는 function foo(){ } 이 함수가 불림. 예외적으로 불림. 이름을 생략하지 않으면 재귀 호출이 가능.

ES6에서 추가된 문법 -> 화살표 함수 (화살표 함수는 람다식이라고도 함.)
const bar = () => { }
js 문법은 크게보면 두가지 요소로 나눌 수 있는데, 하나는 식, 하나는 문.(모든 js 코드는 두가지로)
식 : 코드를 실행하고 그 실행의 결과가 값(0, 1 + 10, undefiend, ...)으로 마무리되면 식임. 값들은 다 하나의 식에 포함시킬 수 있음. 1 + 10 + foo();
문 : if() {}, while() {}등.
식과 문의 차이는 세미콜론이 있고 없고로도 구분 가능. 식이 변종이 많으므로 식을 이해하는게 더 중요.
const bar = x => x * 2; 
x(10);
return을 생략하게끔 설계돼있음. 인자가 하나일때에는 괄호를 생략할 수 있음.

function foo() {
	this.name = 10; // 동적 바인딩(인자를 먼저 선언하지 않아도 쓰기)
}
const y = new foo(); // 인스턴스 객체 -> prototype? 이라고 한다고 함.
if(y instanceof foo) { } // 이런식으로 instanceof 연산자를 이용해 foo함수가 만든 객체인지 확인 가능.
js는 타입을 느슨하게 관리. 그래서 좀 피곤한 일임. 이게 객체일 경우에는 더 어려움. 
왜 굳이 new로 만들지? 할 수 있지만, 이 방법 외에는 만들었을 때 객체를 확인할 방법이 없음.
class bar {
	constructor(){
		this.name = 10;
	}
}
console.log(new bar());
이것도 똑같은 문법임.

foo 함수는 new 연산자와 함께 호출해도 되고, 안붙여도 됨. new 함수로 호출해줘! 를 할려면 함수 앞부분을 대문자로 할 때에는 new 함수로 호출하라고 하는 convention이 있음.
class로 선언할 경우 new가 없으면 오류가 생김. this : context 지시어?


javascript는 싱글쓰레드고, 그렇기 때문에 이벤트루프.....  -> 이거 운영체제 지식임. 브라우저가 운영체제라면? 하고 ................


const person = {
	name: '김민태',
	getName : ()  {
		return this.name;
	}
}
console.log(person.getName());
하면 김민태 출력 됩니다.
getName()을 누가 소유하고 있는가. 를 실행되는 순간 js가 확인함. 이걸 실행 context 라고 함. 문제는 소유자가 사라지는(벗겨지는) 순간이 있음. (window 객체)

UI개발에는 이벤트 시스템이란 것이 있는데, UI개발을 위해 필요함. save 가 눌릴 때 실행할 함수를 하나 줄 테니 대신 호출해달라. -> 전형적인 callback
소유자가 벗겨지는 일은 js에서 부지불식간에 많이 생김. 그래서 this가 무엇인지 항상 확인해야함. 앵귤러, vue, react를 만들때에는 this을 이렇게 바꿨다 저렇게 바꿨다를 많이 하게됨. 
this를 고정하기 위해서는 bind함수(모든 함수가 제공하는 helper함수)를 사용.
초기 react에는 bind를 많이 썼으나, 요새는 전부 arrow함수를 쓰는데, arrow함수를 만들면 this가 바뀌지 않아서 bind를 잘 쓰지 않음.
call, applly, bind 이런거 학습이 필요함. 실무에서 많이 쓰진 않지만 이해하고있는거 필요함.

보통의 에러메세지들은 코딩 지식이 풍부한 것을 전제로 뜨는 경우가 많은데, 그것을 항상 무시하면서 빨간줄 뜨면 그냥 구글에 복붙하는 것을 버릇들면 위험함. 에러메세에서 쓰는 단어가 많지 않으니까 며칠만 고생하면서 에러메시지를 잘 파악해보도록.


--closure--
function foo(){
	return bar(){
	}
}

const f = foo(); //f에는 bar가 오므로
f();// 이게 가능

foo(x)로 된다면, const f = foo(10); 가능.

이때 실제 scope의 x는 없어지지만 return되는 함수 내에서 x의 scope는 기억하고 있는 것을? closure라고 하며, 값을 보호할 때 많이 사용함. 보통 모듈 패턴이라고 많이 함.

const person = { age : 10};

function makePerson(){
	let age = 10;
	return {
		getAge(){
			return age;
		}
	}
}
let p = makePerson();
형태에 현혹되지 말고, 심호홉을 하고 분해해서 보는 용기를 갖도록.

ibare story 에 가서 '자바스크립트의 함수' 보면 이해가 될 것입니다.

js프로그래밍에 가장 어려움을 느끼는 단계 - closure, callback, async 등.

setTimeout(function(x) {
	console.log('앗싸');
	setTimeout(function(y){
		console.log('웃싸');
	}, 2000)
}, 1000);

const p1 = new Promise((resoleve, reject) => { 

	setTimeout(()=> {
		resolve('응답1');
	}, 1000);
	//reject();
});
const p2 = new Promise((resoleve, reject) => { 

	setTimeout(()=> {
		resolve('응답2');
	}, 1000);
	//reject();
});

p1.then(function() {
	
}).catch(function(){});


p1.then(p2)
	.then(function(r){
		console.log(r);
	})
	.catch(function(){});

resolve, reject 둘다 함수인데, resolve를 호출하면 return된 객체의 then에 호출된 함수를 호출함. reject를 호출하면 return된 객체의 then에 호출된 함수를 호출함.
resolve, promise함수가 호출될 때의 지역변수로 만들어준 아이인데, settimeout함수 안에 closure로 됨.

reject가 되면 try catch의 예외구문에 잡힌다! 이걸 잘 해야 좋은 회사에 취직함 ......?

js는 모두 복사가 아니라 참조임. 값이 무조건 바뀜.

function foo(a, b, c){}

function foo(a){
	return function(b){
		return function(c){
			return a + b + c;
		}
	}
}
const foo = a => b => c  => a + b + c; 로도 가능.
여러개의 인자를 가진 함수를 함수마다 인자 하나씩 나누는 걸로 바꾸는 것을 커링이라고 함.

https://fastcampus-js-bootcamp.herokuapp.com/ 참고하시게.

redux 아키텍쳐(flux 아키텍쳐)

store는 객체이다. 

redux.js
export function createStore(){
	let state;
	const getState = () => ({ ...state }); // 객체인지 값인지 구분해주기 위해 ()로 감싸줌
	return {
		getState,
	};
}

index.js
import { createStore} from './redux';

const store = createStore();
console.log(store.getState());

store.person = {}; //이건 안됨. redux의 컨셉은 컴포넌트가 직접적으로 ㄷ이터를 바꾸지 못하게 하는데에 의의가 있음. - 여러개의 컴포넌트가 관심이 있는 상황일 수 있으므로.


redux의 reducer2










-----------------------------------------------------------------------
09/08
오늘의 주제 : react 만들어보기
아키텍쳐 이름만 잘 지어도 naming만 잘 해도 70%는 먹고 들어간다. 너무 높은 수준을 추구하다보니, 이런 것들을 가볍게 여기는 경우가 있으므로, 70%는 먹고 들어가자.
바깥의 영향을 받지 않는 함수 : 순수함수
DOM으로 UI를 조작하는 것은 안정성이 떨어짐, real DOM의 API가 굉장히 low level의 API임. 추상도가 높지 않음. 그러다 보면 복잡도가 올라가고, 수정하기 어려워짐.
.............그런 상황을 타파하기 위해 facebook에서 react를 만듬.
react의 내부 구현은 sw science에서 많이 쓰는 기법이다.

브라우저 -> <H1> ~ </H1> 이런 태그(문자열)을 다루는데, 문자열은 일반적이기 다루기 까다로움. 특별한 구조가 없기 때문에. 그래서 브라우저는 DOM으로 변환하고, DOM을 다룸. DOM이 없다면, 문자열은, 매우 다루기 어려움. DOM Tree를 통해 굉장히 다루기 편리해짐. 근데 DOM Tree도 우리 입장에서는 굉장히 low level임. 그래서 Virtual DOM(VDOM)을 다루고, VDOM이 DOM을 다룸. VDOM은 양쪽을 잘 알고 있음.
브라우저가 html을 dom형태로 만들어 다루는 거나, Real DOM을 VDOM을 통해 다루는 거나 똑같은 컨셉이다.
쉽다 -> JSX

import React from 'react';
import ReactDOM from 'react-dom';

function App(){
	return <h1>1</h1>;
}

ReactDOM.render(<App />, document.getElementById("root")); // JSX 문법이라 component가 태그처럼 되어있음



import React from 'react';
import ReactDOM from 'react-dom';

function App(){
	return (
		<div>
		<h1>Hello?</h1>
			<ul>
				<li>React></li>
				<li>Redux</li>
				<li>Redux</li>
				<li>Redux</li>
			</ul>
		</div>

	)
}

ReactDOM.render(<App />, document.getElementById("root")); 



Babel이 변환해준다. 	




import React from 'react';
import ReactDOM from 'react-dom';

function List(){
	return (
		<ul>
			<li>React></li>
			<li>Redux</li>
			<li>Typescript</li>
			<li>mobx</li>
		</ul>
	)
}

function App(){
	<div>
		<h1>Hello?</h1>
		<List />
	</div>
}
ReactDOM.render(<App />, document.getElementById("root")); 




List -> StudyList로 바꾸는 순간 의미가 부여되므로, 이름을 줄 수 있다는 것은 굉장히 중요한 의미임. 읽기쉬워진다. 읽기 쉬워지면 고치기 쉬워진다. 





import React from 'react';
import ReactDOM from 'react-dom';

function StudyList(){
	return (
		<ul>
			<li className="item">React></li>
			<li className="item">Redux</li>
			<li className="item">Typescript</li>
			<li className="item">mobx</li>
		</ul>
	)
}

function App(){
	<div>
		<h1>Hello?</h1>
		<StudyList />
	</div>
}

ReactDOM.render(<App />, document.getElementById("root")); 


위 코드에서, 이런 태그들을(문자열들을) JS에서 가장 다루기 쉬운 객체로 바꾼다.

//React가 딱 이렇게 생김.
import React from 'react';
import ReactDOM from 'react-dom';

//vdom은 이렇게 생겼을 거임. 자식은 n개 가지고 있음.
const vdom = {
	type: 'ul',
	props: { },
	children: [
		{type: 'li', props: { className: "item" }, children: "React"},
		{type: 'li', props: { className: "item" }, children: "Redux"},
		{type: 'li', props: { className: "item" }, children: "Typescript"},
		{type: 'li', props: { className: "item" }, children: "mobx"}
	]
};


function StudyList() {
	return (
		<ul>
			<li className="item" label="haha">React></li>
			<li className="item">Redux</li>
			<li className="item">Typescript</li>
			<li className="item">mobx</li>
		</ul>
	)
}

function App(){
	return(
		<div>
			<h1>Hello?</h1>
			<StudyList item="abcd" id="hoho"/>
		</div>
	);
}

ReactDOM.render(<App />, document.getElementById("root")); 

react가 뭐 대단한 기술이 있어서, 상태로만 데이터를 받는게 아님. 자식요소는 당연히 n개이거나 없거나 일 수 밖에 없음. 이게 여러개로 중첩도가 깊고 많을 뿐. 최상위에 단 하나의 부모 component가 있을 수 밖에 없는 구조. 그래서 react는 vdom이 단 하나밖에 있을 수 밖에 없는 구조. vdom은 의외로 간단하다.





import React from 'react';
import ReactDOM from 'react-dom';

const vdom = {
	type: 'ul',
	props: { },
	children: [
		{type: 'li', props: { className: "item" }, children: "React"},
		{type: 'li', props: { className: "item" }, children: "Redux"},
		{type: 'li', props: { className: "item" }, children: "Typescript"},
		{type: 'li', props: { className: "item" }, children: "mobx"}
	]
};


function StudyList() {
	React.createElement('ul', { }); // vdom 객체를 만드는 역할. 언제 화면에 붙일 까? render할 때(붙일 때) render는 vdom안의 내용을 계속 쫓아가면서 component로(?) 만드는 역할.
	return (
		<ul>
			<li className="item" label="haha">React></li>
			<li className="item">Redux</li>
			<li className="item">Typescript</li>
			<li className="item">mobx</li>
		</ul>
	)
}

function App(){
	return(
		<div>
			<h1>Hello?</h1>
			<StudyList item="abcd" id="hoho"/>
		</div>
	);
}

ReactDOM.render(<App />, document.getElementById("root")); 
















import React from 'react';
import ReactDOM from 'react-dom';

const vdom = {
	type: 'ul',
	props: { },
	children: [
		{type: 'li', props: { className: "item" }, children: "React"},
		{type: 'li', props: { className: "item" }, children: "Redux"},
		{type: 'li', props: { className: "item" }, children: "Typescript"},
		{type: 'li', props: { className: "item" }, children: "mobx"}
	]
};


function createElement(type, props = {}, ...children) {
	return { type, props, children }
}

function StudyList() {
	return (
		<ul>
			<li className="item" label="haha">React></li>
			<li className="item">Redux</li>
			<li className="item">Typescript</li>
			<li className="item">mobx</li>
		</ul>
	)
}

function App(){
	const vdom = createElement('ul', {}, createElement('li', {}, 'React')); //이런식으로 계속해서 써나가는 것.
	console.log(vdom);
	return(
		<div>
			<h1>Hello?</h1>
			<StudyList item="abcd" id="hoho"/>
		</div>
	);
}

ReactDOM.render(<App />, document.getElementById("root")); 




개발자도 기본적으로 소비자이므로 편리하고 이쁜것을 좋아함. babel을 이용해보자. 

코드 상단에 /* @jsx H*/라고 붙이면, transfiling할 method명을 임의로 지정할 수 있음.










/* @jsx createElement */
import React from 'react';
import ReactDOM from 'react-dom';
/*
const vdom = {
	type: 'ul',
	props: { },
	children: [
		{type: 'li', props: { className: "item" }, children: "React"},
		{type: 'li', props: { className: "item" }, children: "Redux"},
		{type: 'li', props: { className: "item" }, children: "Typescript"},
		{type: 'li', props: { className: "item" }, children: "mobx"}
	]
};
*/

function createElement(type, props = {}, ...children) {
	return { type, props, children }
}

function StudyList() {
	return (
		<ul>
			<li className="item" label="haha">React></li>
			<li className="item">Redux</li>
			<li className="item">Typescript</li>
			<li className="item">mobx</li>
		</ul>
	)
}

function App(){
	const vdom = createElement('ul', {}, createElement('li', {}, 'React')); //이런식으로 계속해서 써나가는 것.
	console.log(vdom);
	return(
		<div>
			<h1>Hello?</h1>
			<StudyList item="abcd" id="hoho"/>
		</div>
	);
}

console.log(<App />);

//ReactDOM.render(<App />, document.getElementById("root")); 

js는 기본적으로 compile time이란게 없었는데, 이제는 ES6 이상으로 다 개발하다 보니 script 언어로 개발하다 보니 compile time이라는 layer가 새로 생겼음. @jsx 지시어를 쓰면 jsx문법을 자동으로 찾아서 변환해줌. (react문서에 다 나와있다 - 책 추천 보다는 공식문서를 철저하게 보는게 훨씬 좋음)


https://pomb.us/build-your-own-react/ 요 링크를 보면 리엑트를 자세하게 구현하는 부분이 나와요. 참고하셔요







위와 같은 코드로 만들었을 때의 문제점.

리액트 사용자 컴포넌트는 왜 대문자로 시작해야 하는가?
babel이 transfiling할 때, 소문자(ul 등)의 경우 문자열로 넣어주는데, 대문자로 시작하는 경우네는 다르게, 함수로 넣어줌. react에서 사용자 컴포넌트(html built-in component말고) 의 경우는 대문자로 시작하게 해야함. 빌트인 컴포넌트와 사용자 컴포넌트를 대소문자로 구분하게 해놓았음.













/* @jsx createElement */

function createElement(type, props = {}, ...children) {
	if (typeof type === 'function') {
		return type.apply(null, [props, ...children]);
	}
	return { type, props, children }
}

function StudyList() {
	return (
		<ul>
			<li className="item" label="haha">React></li>
			<li className="item">Redux</li>
			<li className="item">Typescript</li>
			<li className="item">mobx</li>
		</ul>
	)
}

function App(){
	const vdom = createElement('ul', {}, createElement('li', {}, 'React')); //이런식으로 계속해서 써나가는 것.
	console.log(vdom);
	return(
		<div>
			<h1>Hello?</h1>
			<StudyList item="abcd" id="hoho"/>
		</div>
	);
}

console.log(<App />);

//ReactDOM.render(<App />, document.getElementById("root")); 















/* @jsx createElement */

/*
const ul = document.createElemtn('ul');

document.body.appendChild(ul);
이걸 코드로 만드는 것
*/
// 이 코드는 침착하게 보시오 한줄씩.
function renderElement(node){ //재귀일 수 밖에 없음. vdom도 결국 tree이므로.

	if (typeof node === "string") {
		return 
	}

	const el = document.createElement(node.type);

	node.children.map(renderElement).forEach(element => {
		el.appendChild(element);
	}); 
	return el; // element를 만든 수 return하면 appendChild로 감
}

function render(vdom, container) {
	container.appendChild( renderElement(vdom)/*realdom return*/);
}

function createElement(type, props = {}, ...children) {
	if (typeof type === 'function') {
		return type.apply(null, [props, ...children]);
	}
	return { type, props, children }
}

function Row(props) {
	return <li>{ props.label}></li>
}

function StudyList() {
	return (
		<ul>
			<Row label="hahaha hmmmm" />
			<li className="item" label="haha">React></li>
			<li className="item">Redux</li>
			<li className="item">Typescript</li>
			<li className="item">mobx</li>
		</ul>
	)
}

function App(){
	const vdom = createElement('ul', {}, createElement('li', {}, 'React')); //이런식으로 계속해서 써나가는 것.
	console.log(vdom);
	return(
		<div>
			<h1>Hello?</h1>
			<StudyList item="abcd" id="hoho"/>
		</div>
	);
}
console.log(<App />);
render(<App />, document.getElementById("root"));

//ReactDOM.render(<App />, document.getElementById("root")); 




     

jquery는 하면 별로인 모양.............


https://developer.mozilla.org/ko/docs/Learn/Getting_started_with_the_web/%EC%9B%B9%EC%9D%98_%EB%8F%99%EC%9E%91_%EB%B0%A9%EC%8B%9D

hook/mobx/observable/지연/클로져/saga/generator


컴포넌트가 렌더링 된 순서대로 인덱스가 생성됨. 리액트 훅은 리액트 컴포넌트안에서만 호출돼야 함.

클래스형 -> 함수형으로 바뀐 이유. 좀 더 선언형으로 코드를 만들기 위해서! 

요새 react native 개발자가 귀함. 잘 찾아보면 좋은 대우 받을 수 있을 것임.



09/15
middleware(plugin)

몽키패칭
원래 것을 다른 것으로 바꿔놓는 것. 할일을 한 뒤, 다시 원래껄로 바꿔놓는다.
몽키패칭이라고 했지만, 사실 하드코딩임. 그래도 좋게 느껴지지 않을 수 있다.

sw에서 하나만 될 때와, 두 개가 될 때는 매우 큰 차이가 남.
한 개일 때에는 매우 단순, 두 개는 n개가 된다는 의미이므로 엄청나게 복잡해진다.

middleware
데이터가 input으로 처리기를 거쳐 어떤 흐름을 거친 뒤 output으로 나갈때, 처리기 안에 몇가지 처리를 더 넣어주면 모든 input들은 그 처리들도 다 거쳐감(middleware)
middleware는 plugin과 다르게, 데이터 10개가 들어가면 그 10개 모두가 흐름을 모두 거쳐감.
당연히 꽂힌 순서대로 데이터가 거쳐감(흘러감). 순서가 있는 middle는 주의해야함. - A middleware는 B middleware 다음에 와야 한다 등.

reverse()하는 이유?

next를 안하고 ajax콜을 하고, 비동기적으로 응답이 오면 그때 next.

강사님 왈 : react와 js의 차이를 잘 모르겠다. 그냥 거의 비슷함. js를 배워야하나.....?

js 공부에 많이 도움되는 사이트
https://github.com/leonardomso/33-js-concepts





------------------------------------------------------------------------------
09/17 - webpack/reduxSaga

settimeout 0을 걸어놔도 동기와는 무조건 다르게 흘러감.
const aaaa = require(asdfsfd.js) 하는건 common js 문법

webpack의 설정이 굉장히 복잡
버전업 되면서 어제 됐던 것이 오늘 안되는 경우도 있음.
꼭 webpack이 아니라 rollup?, paracel?도 있음.
webpack은 그냥 platfrom같은 느낌.
build는 첫번째 js파일부터 시작해서 그 파일이 읽어들이는 애들을 계속 읽어나가면서 merge시키는 것을 말하는데, webpack

webpack.config.js 파일에서 entry : { } 부분에 있는 파일을 첫번쨰로 읽어들여서 거기에 포함되어있는 파일들을 쭉쭉 읽어나감. module :{ } 부분이 loader 부분.

webpack에서 중요한 부분 중 하나는 loader. loader는 middleware에 해당하는 컨셉. webpack.config.js 파일에서 module :{ } 부분이 loader 부분.

webpack은 이런 설정을 제공하는 platform이다.

실제로는, 형식은, 실행파일임.(" .js ")

그 다음 webpack에서 plugin이 있다. loader보다 훨씬 복잡. webpack의 안쪽에 있는 lowlevel 기능들을 모두 plugin에게 노출시켜주기 때문. plugin이 훨씬 많은 일을 할 수 있다.

loader : converting, plugin : 그 후 처리, 라고 생각하면 됨.






















