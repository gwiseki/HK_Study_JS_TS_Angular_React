서비스 - 웹 앱이 견고한 앱으로 거듭나기 위해 필요. 컴포넌트에서 비즈니스 로직을 분리해 관리할 수 있음. 뷰와 관련없이 앱 전역에서 사용할 수 있는 순수한 비즈니스 로직이나 값을 다루는 클래스. 서비스가 없으면 여러 컴포넌트에서 반복 작성해야 하는 로직도 발생할 것. 서비스를 사용하면 모든 컴포넌트에서 기능을 수정할 필요 없이 하나의 서비스만 수정하면 된다. 컴포넌트에서 뷰와 연관이 없거나 여러 컴포넌트에 산재한 공통 로직을 분리해서 서비스에 담아야. 컴포넌트에 뷰의 로직과 비즈니스 로직이 공존하는 상황은 전형적인 안티패턴임. 

서비스는 cp와 달리 꼭 붙여야 하는 데코레이터는 없다. -> 순수한 ts 클래스. 다만 @injectable을 붙이는 것을 권장. 없어도 동작(필수는 아니다)

ng new mouse-pos-logger --prefix mpl
ng g service my-special-logger
ng g enum log-level

@input 데코레이터를 통해 상위 컴포넌트에서 전달한 데이터를 받을 수 있음. 그렇게 하면 컴포넌트 @input이 붙은 속성은 템플릿에서 프로퍼티 바인딩 시 속성으로 사용 가능. -> 싱글톤 방식으로 구현 가능 - 싱글턴 패턴은 인스턴스가 오직 1개만 생성되야 하는 경우에 사용되는 패턴입니다. 예를들어 레지스트리 같은 설정 파일의 경우 객체가 여러개 생성되면 설정 값이 변경될 위험이 생길 수 있습니다.
인스턴스 1개만 생성되는 특징을 가진 싱글턴 패턴을 이용하면, 하나의 인스턴스를 메모리에 등록해서 여러 컴포넌트가 동시에 해당 인스턴스를 공유하여 사용하게끔 할 수 있으므로, 요청이 많은 곳에서 사용하면 효율을 높일 수 있습니다.

ng의 의존성 주입기는 데코레이터 여부로 인스턴스를 생성할 때 생성자에 의해 의존성을 주입해 줄 필요가 있는지를 결정함.  서비스의 경우 평범한 ts 클래스이므로 생성자에 매개변수를 선언해두어도 ng의 의존성주입기가 의존성 주입이 필요한지를 확인할 방법이 없음. 그러므로 서비스에서 생성자의 매개 변수로 의존성 주입이 필요한 경우에는 클래스에 Injectable을 붙여야 함. 생성자의 매개변수로 주입받을 의존성 정보가 없다면 굳이 붙이지 않아도 되지만 관례상 코드의 확장을 위하여, 또는 버그를 미연에 방지하기 위하여 서비스를 선언할 때 Injectable을 붙이는 것을 권장하는 것.
constructor( @Inject(LOG_LEVEL_TOKEN) logLevel: LogLevel)  -> 생성자의 인자로 받는 logLevel앞에 @inject 붙이고('logLevel') 해줌.
그 다음 app.module.ts에 { provide: 'logLevel', useValue: LogLevel.INFO } 해줌. 이 JSON 객체는 의존성 주입기가 클래스를 생성할 때 참고하는 공급자 타입의 값. 공급자는 의존성 주입기가 생성할 클래스에 무엇으로 의존성을 주입할 지 알려주는 정보임. 공급자 타입에는 ClassProvider, ValueProvider, ExistingProvider, FactoryProvider, TypeProvider. ClassProvider와 ValueProvider만 거의 사용함.  { provide: 'logLevel', useValue: LogLevel.INFO } 이 부분의 'logLevel'은 ValueProvider. 맨 
providers: [ MySpecialLoggerService, AnotherLoggerService, { provide: LOG_LEVEL_TOKEN, useValue: LogLevel.INFO } ]에서 MySpecialLoggerService도 원래는  { provide: MySpecialLoggerService, useClass: MySpecialLoggerService } 임. ClassProvider 사용한 것. 저렇게도 쓸 수 있음.
공급자에서 provide는 키 값이라고도 할 수 있는데, 보통은 MySpecialLoggerService 등의 클래스가 타입의 키가 됨. 키가 중복될 경우 주입기는 마지막에 선언된 공급자를 꺼내서 의존성 주입을 해 주는데, 이러한 문제를 막기 위해 ng에서는 Injection Token을 제공. InjectinoToken 안에 임의의 키 값을 전달하여 생성.
어떤 컴포넌트에서 서비스를 사용하든 동일한 객체가 주입되는데, 이렇게 시스템 안에서 단일 객체로 존재하는 것을 싱글턴이라고 함. MySpecialLoggerService도 ng에서 싱글턴으로 존재하므로 logLevel이 전체 app에 일관되게 적용됨. but 때때로 새로운 서비스 클래스를 주입받고 싶은 경우도 존재. 이를 위해 ng에는 의존성 주입기 트리라는 개념이 있음.



Input 데코레이터를 통해 상위 컴포넌트에서 전달한 데이터를 받을 수 있음. Input 데코레이터가 붙은 속성을 그 컴포넌트를 부르는 컴포넌트의 템플릿에서 프로프티 바인딩으로 [] 안에 사용 가능


만약 MySpecialLoggerService 인스턴스 생성시 특정 정보가 추가되어야 한다면,
this.logger = new MySpecialLoggerService(LogLevel.INFO, new RemoteConnection( ));
이렇게 MySpecialLoggerService 인스턴스 생성하는 곳마다 다 수정해줘야함. 여기서 ng의 의존성 주입 기능을 사용하면 불편함 해소 가능
Dependency Injection을 이용하면 코드 레벨에서 서비스의 싱글턴을 직접 유지하려고 하지 않아도 된다. 기본적으로 인스턴스를 요청할 때마다 동일한 인스턴스를 주입해주기 때문.
사용 방법 중 하나 - NgModule의 메타데이터 providers에 MySpecialLoggerService를 선언해주는 것.
ng의 의존성 주입기가 cp생성 시 생성자의 인자로 MySpecialLoggerService를 주입해 줌. 즉 의존성 주입기가 의존성을 주입해주는 통로가 클래스의 생성자 매개변수임.

ng의 의존성 주입기는 @Injectable 여부로 인스턴스 생성시 생성자에 의해 의존성을 주입해 줄 필요가 있는지를 결정. cp의 경우 @Component를 통해 cp 클래스가 의존성을 주입받을 수 있는 클래스라는 것을 ng가 알 수 있음. 따라서 @injectable이 없어도 cp클래스의 생성자에 의존성을 주입받을 매개 변수를 선언하면 의존성 주입기가 매개 변수에 선언된 타입 중 의존성 정보를 가지고 있는 인스턴스를 주입해줌. 
반면 서비스의 경우 평범한 TS 클래스이기 때문에 생성자에 매개 변수를 선언해두어도 ng의 의존성 주입기가 의존성 주입이 필요한지를 확인할 방법이 없음. 그러므로 서비스에서 생성자의 매개 변수로 의존성 주입이 필요한 경우 클래스에 Injectable을 붙여야함. 생성자의 매개 변수로 주입받을 의존성 정보가 없다면 굳이 Injectable을 붙이지 않아도 되지만 관례상 코드의 확장을 위하여, 또는 버그 미연 방지로 Injectable 권장.

MySpecialLoggerService는 생성자에 LogLevel타입의 매개 변수를 선언했기 때문에 Injectable을 클래스 선언에 붙여줘야함. 이로 인해 cp에서 의존성 주입기로 MySpecialLoggerService의 인스턴스를 주입받으려고 할 때 의존성 주입기는 MySpecialLoggerService에 붙어있는 Injectable을 보고 생성자에 선언된 매개 변수를 주입하려고 시도함. 그러므로 logLevel도 의존성 정보를 선언해야함. constructor(@Inject('logLevel') logLevel: LogLevel) { 이런식으로. Inject는 주입할 대상의 정보를 선언할 때 사용. 주입할 대상 타입이 클래스인 경우 ng가 자동으로 추론하여 주입하므로 Inject를 붙일 필요가 없으나 logLevel은 숫자값이므로 명시적으로 Inject 선언 필요.
또 AppModule의 LogLevel에 대한 의존 정보 선언이 필요. providers: [MySpecialLoggerService, {provide : 'logLevel', useValue : 'LogLevel.INFO'}], 이렇게. 

주입기 트리는 현재 cp에 필요한 서비스 클래스가 선언돼 있는 상위 cp까지 찾아 올라가서 해당 주입기로부터 서비스를 받게 함. cp에서도 새로운 서비스를 주입받을 수 있도록 @Component 에 providers 정보를 줄 수도 있음. @Ngmodule의 providers에 선언한 것과 동일하며, 차이는 cp레벨에서 새로운 서비스를 생성해 준다는 것.

DI를 통해 MySpecialLoggerService의 인스턴스를 주입받는 것은 유지하면서 MouseTrackZoneComponent가 AppComponent로부터 독립적으로 로거 인스턴스를 주입받도록 하려면, MouseTrackZoneComponent의 메타데이터에서 providers에 MySpecialLoggerService를 추가하면 됨. 







