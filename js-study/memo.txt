https://blog.naver.com/35mwlee/222141868654
Javascript 일반 함수, 인라인(Inline) 함수 그리고 익명(Anonymous) 함수

In JavaScript, inline function is a special type of anonymous function which is assigned to a variable, or in other words, an anonymous function with a name. JavaScript does not support the traditional concept of inline function like in C or C++. Thus anonymous function and inline function is practically the same. Unlike normal function, they are created at runtime.

js는 싱글쓰레드


tsc : typescript compiler



---------------context-------------------
https://mingcoder.me/2020/02/28/Programming/JavaScript/execute-context/
코드 관리를 위해 function, module, package 와 같이 조각을 내는데, 그렇게 나뉜 조각을 context라고 함. js 엔진이 처음 실행될 때 처음으로 실행되는 컨텍스트는 global execution context. 이 실행 컨텍스트는 두가지로 구성 - global object / this ( 브라우저에서 js 실행하는 경우 this : window, Node 환경에서는 this : global)
실행 컨텍스트에는 생성단계, 실행단계가 있으며, 각 단계는 고유한 역할을 가짐. 생성시 undefined 할당, 실행시 값 할당 등. 생성단계에서 변수 선언시 undefined로 값이 초기화되는 것을 hoisting 이라고 함 (global execution context에서 뿐 아니라 functino executino context에서도 동일)

함수 실행 컨텍스트 : 함수가 호출될 때마다 생성됨. 함수 실행 컨텍스트가 생성될 때마다 js 엔진은
1. arguments object 생성 2. this 변수 obj 생성 3. 변수/함수 용 메모리 확보 4. 선언식 함수를 메모리에 배치하면서 변수 선언에 기본값 undefined 할당
global obj -> arg obbj 로만 바뀌고 나머지 동일
새 execution context가 생성되고 콜 스택에 추가됨. 생성 단계와 실행 단계를 끝내면 콜 스택에서 제거됨.
passed argument는 해당 함수의 execution context에 로컬변수로 추가됨.

자바스크립트 엔진은 함수 실행 컨텍스트에서 로컬 변수를 찾지 못하면 가장 가까운 부모 실행 컨텍스트에 그 변수가 있는지 찾는다.  이 loopup chain은 글로벌 실행 컨텍스트에 도달할 때까지 계속된다. 위의 예에서는 글로벌 실행 컨텍스트에 변수 name이 있어서 그 값이 출력된다.

다른 함수의 안에 중첩된 함수가 있는 경우이다. 이 경우에 부모 함수의 실행 컨텍스트가 실행 스택에서 제거되었더라도 자식 함수는 부모 함수의 스코프에 여전히 접근할 수 있다.
자식 함수가 부모 함수의 변수 환경을 closing하는(묶어서 갖고 있는) 컨셉을 클로저라고 부른다.










https://helloworldjavascript.net/pages/285-async.html (~task queue 부분까지 읽으면 될듯)
지연시간을 0으로 주면, 브라우저는 setTimeout에 넘겨진 콜백을 바로 실행하는 것이 아니라 그 콜백을 작업 큐에 등록.  호출 스택이 비워지면, 그제서야 작업 큐에 들어있는 콜백을 가져와서 실행. 이 때문에 그 콜백이 setTimeout없이 실행하는 함수보다  나중에 실행된다.
정확히는, 지연시간으로 0을 준다고 해도 바로 작업 큐에 추가되지 않고 4ms 지연시간이 흐른 뒤에 작업 큐에 추가됩니다. setTimeout에 4보다 작은 지연시간을 주면, 4ms 지연시간이 대신 사용되기 때문입니다


try-catch-finally
1try...catch
2try...finally
3try...catch...finally

------------------------Promise--------------------------
https://joshua1988.github.io/web-development/javascript/js-async-await/ - 좋은 블로그, 참고
A promise is an object that may produce a single value some time in the future

자바스크립트 Promise 쉽게 이해하기
목차
Promise가 뭔가요?
Promise가 왜 필요한가요?
프로미스 코드 - 기초
프로미스의 3가지 상태(states)
프로미스 코드 - 쉬운 예제
여러 개의 프로미스 연결하기 (Promise Chaining)
실무에서 있을 법한 프로미스 연결 사례
프로미스의 에러 처리 방법
프로미스 에러 처리는 가급적 catch()를 사용
마무리
글보다 더 쉽게 배우는 온라인 강좌
Promise가 뭔가요?
“A promise is an object that may produce a single value some time in the future”

프로미스는 자바스크립트 비동기 처리에 사용되는 객체입니다. 여기서 자바스크립트의 비동기 처리란 ‘특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 자바스크립트의 특성’을 의미합니다. 비동기 처리에 대한 이해가 없으시다면 이전 글 ‘자바스크립트 비동기 처리와 콜백 함수’를 읽어보시길 추천드립니다 :)

Promise가 왜 필요한가요?
프로미스는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용합니다. 일반적으로 웹 애플리케이션을 구현할 때 서버에서 데이터를 요청하고 받아오기 위해 아래와 같은 API를 사용합니다.

$.get('url 주소/products/1', function(response) {
  // ...
});
JsCopy
위 API가 실행되면 서버에다가 ‘데이터 하나 보내주세요’ 라는 요청을 보내죠. 그런데 여기서 데이터를 받아오기도 전에 마치 데이터를 다 받아온 것 마냥 화면에 데이터를 표시하려고 하면 오류가 발생하거나 빈 화면이 뜹니다. 이와 같은 문제점을 해결하기 위한 방법 중 하나가 프로미스입니다.

프로미스 코드 - 기초
그럼 프로미스가 어떻게 동작하는지 이해하기 위해 예제 코드를 살펴보겠습니다. 먼저 아래 코드는 간단한 ajax 통신 코드입니다.

function getData(callbackFunc) {
  $.get('url 주소/products/1', function(response) {
    callbackFunc(response); // 서버에서 받은 데이터 response를 callbackFunc() 함수에 넘겨줌
  });
}

getData(function(tableData) {
  console.log(tableData); // $.get()의 response 값이 tableData에 전달됨
});
JsCopy
위 코드는 제이쿼리의 ajax 통신 API를 이용하여 지정된 url에서 1번 상품 데이터를 받아오는 코드입니다. 비동기 처리를 위해 프로미스 대신에 콜백 함수를 사용했습니다.

위 코드에 프로미스를 적용하면 아래와 같은 코드가 됩니다.

function getData(callback) {
  // new Promise() 추가
  return new Promise(function(resolve, reject) {
    $.get('url 주소/products/1', function(response) {
      // 데이터를 받으면 resolve() 호출
      resolve(response);
    });
  });
}

// getData()의 실행이 끝나면 호출되는 then()
getData().then(function(tableData) {
  // resolve()의 결과 값이 여기로 전달됨
  console.log(tableData); // $.get()의 reponse 값이 tableData에 전달됨
});
JsCopy
콜백 함수로 처리하던 구조에서 new Promise(), resolve(), then()와 같은 프로미스 API를 사용한 구조로 바뀌었습니다. 여기서 new Promise()는 좀 이해가 가겠는데 resolve(), then()은 뭐 하는 애들일까요? 아래에서 함께 알아보겠습니다.

프로미스의 3가지 상태(states)
프로미스를 사용할 때 알아야 하는 가장 기본적인 개념이 바로 프로미스의 상태(states)입니다. 여기서 말하는 상태란 프로미스의 처리 과정을 의미합니다. new Promise()로 프로미스를 생성하고 종료될 때까지 3가지 상태를 갖습니다.

Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태
Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태
Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태
Pending(대기)
먼저 아래와 같이 new Promise() 메서드를 호출하면 대기(Pending) 상태가 됩니다.

new Promise();
JsCopy
new Promise() 메서드를 호출할 때 콜백 함수를 선언할 수 있고, 콜백 함수의 인자는 resolve, reject입니다.

new Promise(function(resolve, reject) {
  // ...
});
JsCopy
Fulfilled(이행)
여기서 콜백 함수의 인자 resolve를 아래와 같이 실행하면 이행(Fulfilled) 상태가 됩니다.

new Promise(function(resolve, reject) {
  resolve();
});
JsCopy
그리고 이행 상태가 되면 아래와 같이 then()을 이용하여 처리 결과 값을 받을 수 있습니다.

function getData() {
  return new Promise(function(resolve, reject) {
    var data = 100;
    resolve(data);
  });
}

// resolve()의 결과 값 data를 resolvedData로 받음
getData().then(function(resolvedData) {
  console.log(resolvedData); // 100
});

Rejected(실패)
new Promise()로 프로미스 객체를 생성하면 콜백 함수 인자로 resolve와 reject를 사용할 수 있다고 했습니다. 여기서 reject를 아래와 같이 호출하면 실패(Rejected) 상태가 됩니다.
new Promise(function(resolve, reject) {
  reject();
});

그리고, 실패 상태가 되면 실패한 이유(실패 처리의 결과 값)를 catch()로 받을 수 있습니다.
function getData() {
  return new Promise(function(resolve, reject) {
    reject(new Error("Request is failed"));
  });
}
// reject()의 결과 값 Error를 err에 받음
getData().then().catch(function(err) {
  console.log(err); // Error: Request is failed
});

async function 함수명() {
  await 비동기_처리_메서드_명();
}
먼저 함수의 앞에 async 라는 예약어를 붙입니다. 그러고 나서 함수의 내부 로직 중 HTTP 통신을 하는 비동기 처리 코드 앞에 await를 붙입니다. 여기서 주의하셔야 할 점은 비동기 처리 메서드가 꼭 프로미스 객체를 반환해야 await가 의도한 대로 동작합니다.


await 붙을 메서드는 promise를 반환하는 메서드여야 함.
await는 async 붙은 함수 내에서만 사용 가능.











observable, subject
-----------------lazy-------------------
https://www.codingfactory.net/11943
일반적으로 레이지 로딩은 스크롤 애니메이션을 통해 구현됩니다.

웹 페이지의 로딩 속도에 큰 영향을 미치는 것 중의 하나는 이미지입니다. 이를 해결해주는 방법 중의 하나가 Lazy Loading입니다.

웹브라우저에 보이는 영역 안에 있는 이미지는 로드하고, 보이지 않는 부분은 로드하지 않습니다.
밑으로 스크롤하여 이미지가 있는 영역에 도달하면 그 때 이미지를 로드합니다.
이렇게 하면 불필요한 이미지 로딩으로 인한 속도 저하를 방지할 수 있습니다.

Lozad.js
Lozad.js는 Lazy Loading을 구현해주는 자바스크립트 라이브러리입니다.

Highly performant, light and configurable lazy loader in pure JS with no dependencies for images, iframes and more, using IntersectionObserver API.








-------------vanilla js---------------
Vanilla JS는 자바스크립트 프레임워크로 다른 프레임워크나 jQuery보다도 압도적으로 빠르고 크로스 브라우징이 잘 되는 특성이 있다. 페이스북, 구글, 유튜브 등등 유명한 해외 사이트에서 사용되었으며, 다른 플랫폼보다도 오래되었음에도 불구하고 꾸준히 업데이트 되어 온 프레임워크이다. 용량도 매우 가벼워서 압축을 하는 경우 압축을 하지 않은 경우보다 용량이 더 나가는 역설적인 무게를 자랑한다.
어떠한 라이브러리나 프레임워크를 쓰지 않는 자바스크립트를 이르는 별명이다. 그러나 순수 자바스크립트의 특성상 라이브러리를 쓰면 간단하게 쓸 수 있는 코드가 길어지는 일이 왕왕 발생한다. 

https://gbsb.tistory.com/410
VanillaJS는 JavaScript의 한 종류로, 브라우저를 통해 제공된 JavaScript이다. Library나 Framework가 없는 JavaScript이다. (화장 없는 JavaScript, 도움 없는 JavaScript, 날 것의 JavaScript이다. Library, Framework는 메이크업, 화장같은 존재이다)




-----------------
let에 대해
지금까지 우리는 기존에 알고있는 JavaScript의 var 키워드 대신 let 키워드를 사용했습니다. let 키워드는 실제로 TypeScript에서 사용할 수있는 더 새로운 JavaScript 구문입니다. 나중에 자세한 내용을 다루 겠지만, 자바 스크립트의 많은 일반적인 문제는 let을 사용하여 완화되므로 가능할 때마다 var 대신 사용하십시오.

https://velog.io/@bathingape/JavaScript-var-let-const-%EC%B0%A8%EC%9D%B4%EC%A0%90
변수 선언에는 기본적으로 const를 사용하고, 재할당이 필요한 경우에 한정해 let 을 사용하는 것이 좋다.
그리고 객체를 재할당하는 경우는 생각보다 흔하지 않다. const 를 사용하면 의도치 않은 재할당을 방지해 주기 때문에 보다 안전하다.
재할당이 필요한 경우에 한정해 let 을 사용한다. 이때, 변수의 스코프는 최대한 좁게 만든다.
재할당이 필요 없는 상수와 객체에는 const 를 사용한다.











-----------Javascript의 동기/비동기 의미를 사전적 의미까지 포함해서 설명------------
https://codingbroker.tistory.com/28